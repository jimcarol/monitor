[{"/Users/jimhe/tools/lighthouse-monitor/src/app/admin/page.tsx":"1","/Users/jimhe/tools/lighthouse-monitor/src/app/layout.tsx":"2","/Users/jimhe/tools/lighthouse-monitor/src/app/page.tsx":"3","/Users/jimhe/tools/lighthouse-monitor/src/components/chart.tsx":"4","/Users/jimhe/tools/lighthouse-monitor/src/components/home.tsx":"5","/Users/jimhe/tools/lighthouse-monitor/src/lib/driverpool.ts":"6","/Users/jimhe/tools/lighthouse-monitor/src/lib/job.ts":"7","/Users/jimhe/tools/lighthouse-monitor/src/lib/lighthouse.ts":"8","/Users/jimhe/tools/lighthouse-monitor/src/lib/scheduler.ts":"9","/Users/jimhe/tools/lighthouse-monitor/src/pages/api/url/[env].ts":"10","/Users/jimhe/tools/lighthouse-monitor/src/server.ts":"11"},{"size":1014,"mtime":1686047535562,"results":"12","hashOfConfig":"13"},{"size":409,"mtime":1685602570093,"results":"14","hashOfConfig":"13"},{"size":267,"mtime":1686026618060,"results":"15","hashOfConfig":"13"},{"size":2214,"mtime":1686050738408,"results":"16","hashOfConfig":"13"},{"size":4567,"mtime":1686026461722,"results":"17","hashOfConfig":"13"},{"size":2268,"mtime":1686119162261,"results":"18","hashOfConfig":"13"},{"size":3698,"mtime":1686119162261,"results":"19","hashOfConfig":"13"},{"size":2242,"mtime":1685954441428,"results":"20","hashOfConfig":"13"},{"size":768,"mtime":1686203243882,"results":"21","hashOfConfig":"13"},{"size":1982,"mtime":1685676827098,"results":"22","hashOfConfig":"13"},{"size":676,"mtime":1686119214162,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hry3i0",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jimhe/tools/lighthouse-monitor/src/app/admin/page.tsx",[],[],"/Users/jimhe/tools/lighthouse-monitor/src/app/layout.tsx",[],[],"/Users/jimhe/tools/lighthouse-monitor/src/app/page.tsx",[],[],"/Users/jimhe/tools/lighthouse-monitor/src/components/chart.tsx",[],[],"/Users/jimhe/tools/lighthouse-monitor/src/components/home.tsx",[],[],"/Users/jimhe/tools/lighthouse-monitor/src/lib/driverpool.ts",[],[],"/Users/jimhe/tools/lighthouse-monitor/src/lib/job.ts",["58"],[],"import path from 'path'\nimport { readFileSync, writeFileSync } from 'node:fs'\nimport DriverPool from './driverpool'\nimport { startTest } from './lighthouse'\nimport { existsSync } from 'fs'\nconst driverpool = DriverPool.setup()\n\nconst audits = [\n  'performance',\n  'first-contentful-paint',\n  'interactive',\n  'speed-index',\n  'total-blocking-time',\n  'largest-contentful-paint',\n  'cumulative-layout-shift',\n]\n\nclass Job {\n  private jobHandler: string | number | NodeJS.Timer | null | undefined = null\n\n  start() {\n    driverpool.on('initialed', () => {\n      console.log('[Event initialed]: driverpool initial completed')\n    })\n  }\n\n  end() {\n    this.jobHandler && clearInterval(this.jobHandler)\n  }\n\n  async queueTest(options: any, results: any, date: string) {\n    const data1 = await startTest(options)\n    const data2 = await startTest(options)\n    const data3 = await startTest(options)\n    // const data1 = await test1\n    // const data2 = await test2\n    // const data3 = await test3\n\n    audits.forEach((audit) => {\n      let value = (data1[audit] + data2[audit] + data3[audit]) / 3\n\n      if (audit === 'performance') {\n        value = Math.round(value)\n      } else if (audit === 'cumulative-layout-shift') {\n        value = Number(value.toFixed(3))\n      } else {\n        value = Number(value.toFixed(2))\n      }\n\n      if (!results[options.url]) results[options.url] = {}\n      if (!results[options.url][audit]) results[options.url][audit] = {}\n      if (!results[options.url][audit][options.formFactor])\n        results[options.url][audit][options.formFactor] = {}\n      results[options.url][audit][options.formFactor][date] = value\n    })\n  }\n\n  async startJob(env: string = 'qa') {\n    const date = new Date().toISOString().split('T')[0]\n    let filepath = path.join(process.cwd(), `assets/qa.json`)\n    let resultFile = path.join(process.cwd(), `public/stg-result.json`)\n\n    if (env === 'prod') {\n      filepath = path.join(process.cwd(), `assets/prod.json`)\n      resultFile = path.join(process.cwd(), `public/prod-result.json`)\n    }\n\n    const urls = readFileSync(filepath, { encoding: 'utf-8' })\n    const urlsObject = JSON.parse(urls)\n    let results: any = {}\n\n    if (existsSync(resultFile)) {\n      results = JSON.parse(readFileSync(resultFile, { encoding: 'utf-8' }))\n    }\n\n    for (const url of urlsObject) {\n      const mobileOptions = {\n        driverpool,\n        url,\n        formFactor: 'mobile',\n        screenEmulation: {\n          mobile: true,\n          width: 360,\n          height: 640,\n          deviceScaleFactor: 2.625,\n          disabled: false,\n        },\n        emulatedUserAgent:\n          'Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4590.2 Mobile Safari/537.36 Chrome-Lighthouse',\n      }\n      const desktopOptions = {\n        driverpool,\n        url,\n        formFactor: 'desktop',\n        screenEmulation: {\n          mobile: false,\n          width: 1350,\n          height: 940,\n          deviceScaleFactor: 1,\n          disabled: false,\n        },\n        emulatedUserAgent:\n          'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4590.2 Safari/537.36 Chrome-Lighthouse',\n        throttling: {\n          rttMs: 40,\n          throughputKbps: 10 * 1024,\n          cpuSlowdownMultiplier: 1,\n          requestLatencyMs: 0, // 0 means unset\n          downloadThroughputKbps: 0,\n          uploadThroughputKbps: 0,\n        },\n      }\n      await this.queueTest(mobileOptions, results, date)\n      await this.queueTest(desktopOptions, results, date)\n    }\n\n    writeFileSync(resultFile, JSON.stringify(results))\n  }\n}\n\nexport default new Job()\n","/Users/jimhe/tools/lighthouse-monitor/src/lib/lighthouse.ts",[],[],"/Users/jimhe/tools/lighthouse-monitor/src/lib/scheduler.ts",["59"],[],"/Users/jimhe/tools/lighthouse-monitor/src/pages/api/url/[env].ts",[],[],"/Users/jimhe/tools/lighthouse-monitor/src/server.ts",[],[],{"ruleId":"60","severity":1,"message":"61","line":121,"column":1,"nodeType":"62","endLine":121,"endColumn":25},{"ruleId":"60","severity":1,"message":"61","line":40,"column":1,"nodeType":"62","endLine":40,"endColumn":31},"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration"]